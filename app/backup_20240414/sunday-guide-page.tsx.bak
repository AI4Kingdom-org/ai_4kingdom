'use client';

import { useState, useEffect } from 'react';
import DocumentUploader from '../components/DocumentUploader';
import Chat from '../components/Chat/Chat';
import WithChat from '../components/layouts/WithChat';
import styles from './SundayGuide.module.css';

interface DocumentContent {
  id: string;
  title: string;
  summary: string;
  processed: boolean;
}

export default function SundayGuide() {
  const [defaultAssistant, setDefaultAssistant] = useState<{
    assistantId: string;
    vectorStoreId?: string;
  } | null>(null);
  const [documents, setDocuments] = useState<DocumentContent[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);

  // Initialize default assistant
  useEffect(() => {
    const initializeDefaultAssistant = async () => {
      try {
        const response = await fetch('/api/sunday-guide/assistants/default');
        if (response.ok) {
          const data = await response.json();
          setDefaultAssistant({
            assistantId: data.assistantId,
            vectorStoreId: data.vectorStoreId
          });
        }
      } catch (error) {
        console.error('[ERROR] 初始化默认助手失败:', error);
      }
    };

    initializeDefaultAssistant();
  }, []);

  // Handle document upload and processing
  const handleDocumentUpload = async (file: File) => {
    if (!defaultAssistant?.assistantId) {
      console.error('默认助手未初始化');
      return;
    }

    setIsProcessing(true);
    try {
      // Upload document
      const formData = new FormData();
      formData.append('file', file);
      formData.append('assistantId', defaultAssistant.assistantId);
      
      const uploadResponse = await fetch('/api/sunday-guide/documents/upload', {
        method: 'POST',
        body: formData
      });

      if (!uploadResponse.ok) {
        throw new Error('文档上传失败');
      }

      const uploadData = await uploadResponse.json();
      
      // Process document with default assistant
      const processResponse = await fetch('/api/sunday-guide/documents/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          documentId: uploadData.documentId,
          assistantId: defaultAssistant.assistantId
        })
      });

      if (!processResponse.ok) {
        throw new Error('文档处理失败');
      }

      const processData = await processResponse.json();

      // Update documents list
      setDocuments(prev => [...prev, {
        id: uploadData.documentId,
        title: file.name,
        summary: processData.summary,
        processed: true
      }]);

    } catch (error) {
      console.error('[ERROR] 文档处理失败:', error);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <WithChat>
      <div className={styles.container}>
        <h1 className={styles.title}>Sunday Guide</h1>

        <section className={styles.section}>
          <h2 className={styles.sectionTitle}>文档上传</h2>
          <DocumentUploader
            onUpload={handleDocumentUpload}
            isProcessing={isProcessing}
          />
        </section>

        <section className={styles.section}>
          <h2 className={styles.sectionTitle}>文档内容</h2>
          <div className={styles.documentList}>
            {documents.length === 0 ? (
              <p className={styles.emptyMessage}>暂无文档内容</p>
            ) : (
              documents.map(doc => (
                <div key={doc.id} className={styles.documentItem}>
                  <h3 className={styles.documentTitle}>{doc.title}</h3>
                  <div className={styles.documentSummary}>
                    {doc.processed ? (
                      <p>{doc.summary}</p>
                    ) : (
                      <p className={styles.processing}>处理中...</p>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </section>
      </div>
    </WithChat>
  );
} 